// DO NOT EDIT: This file is auto-generated by build.rs

// Lexical grammar definition for Kulfon language

#[derive(Debug, PartialEq, Eq, Clone)]
pub enum KfTokKind {
    KwIf,
    KwElse,
    KwFor,
    KwWhile,
    KwLoop,
    KwFn,
    KwPub,
    KwLet,
    KwMut,
    KwIn,
    KwBreak,
    KwContinue,
    KwStruct,
    KwEnum,
    KwImpl,
    KwSelf,
    KwSelfT,
    SlTrue,
    SlFalse,
    SymCurlyOpen,
    SymCurlyClose,
    SymParenthOpen,
    SymParenthClose,
    SymBracketOpen,
    SymBracketClose,
    SymAmpersand,
    SymScopeResolution,
    SymAt,
    SymSemi,
    SymColon,
    SymArrow,
    SymDot,
    SymComma,
    SymEllipsis,
    SymHashBracket,
    SymUnderscore,
    OpEq,
    OpNe,
    OpGt,
    OpGe,
    OpLt,
    OpLe,
    OpPlus,
    OpMinus,
    OpSlash,
    OpStar,
    OpBang,
    OpAssign,
    OpAnd,
    OpOr,
    OpPlusPlus,
    OpMinusMinus,
    LitString,    LitChar,    Literal,}

impl KfTokKind {
    pub fn from(s: &str) -> Option<KfTokKind> {
        match s {
            "if" => Some(KfTokKind::KwIf),
            "else" => Some(KfTokKind::KwElse),
            "for" => Some(KfTokKind::KwFor),
            "while" => Some(KfTokKind::KwWhile),
            "loop" => Some(KfTokKind::KwLoop),
            "fn" => Some(KfTokKind::KwFn),
            "pub" => Some(KfTokKind::KwPub),
            "let" => Some(KfTokKind::KwLet),
            "mut" => Some(KfTokKind::KwMut),
            "in" => Some(KfTokKind::KwIn),
            "break" => Some(KfTokKind::KwBreak),
            "continue" => Some(KfTokKind::KwContinue),
            "struct" => Some(KfTokKind::KwStruct),
            "enum" => Some(KfTokKind::KwEnum),
            "impl" => Some(KfTokKind::KwImpl),
            "self" => Some(KfTokKind::KwSelf),
            "Self" => Some(KfTokKind::KwSelfT),
            "true" => Some(KfTokKind::SlTrue),
            "false" => Some(KfTokKind::SlFalse),
            "{" => Some(KfTokKind::SymCurlyOpen),
            "}" => Some(KfTokKind::SymCurlyClose),
            "(" => Some(KfTokKind::SymParenthOpen),
            ")" => Some(KfTokKind::SymParenthClose),
            "[" => Some(KfTokKind::SymBracketOpen),
            "]" => Some(KfTokKind::SymBracketClose),
            "&" => Some(KfTokKind::SymAmpersand),
            "::" => Some(KfTokKind::SymScopeResolution),
            "@" => Some(KfTokKind::SymAt),
            ";" => Some(KfTokKind::SymSemi),
            ":" => Some(KfTokKind::SymColon),
            "->" => Some(KfTokKind::SymArrow),
            "." => Some(KfTokKind::SymDot),
            "," => Some(KfTokKind::SymComma),
            "..." => Some(KfTokKind::SymEllipsis),
            "#[" => Some(KfTokKind::SymHashBracket),
            "_" => Some(KfTokKind::SymUnderscore),
            "==" => Some(KfTokKind::OpEq),
            "!=" => Some(KfTokKind::OpNe),
            ">" => Some(KfTokKind::OpGt),
            ">=" => Some(KfTokKind::OpGe),
            "<" => Some(KfTokKind::OpLt),
            "<=" => Some(KfTokKind::OpLe),
            "+" => Some(KfTokKind::OpPlus),
            "-" => Some(KfTokKind::OpMinus),
            "/" => Some(KfTokKind::OpSlash),
            "*" => Some(KfTokKind::OpStar),
            "!" => Some(KfTokKind::OpBang),
            "=" => Some(KfTokKind::OpAssign),
            "&&" => Some(KfTokKind::OpAnd),
            "||" => Some(KfTokKind::OpOr),
            "++" => Some(KfTokKind::OpPlusPlus),
            "--" => Some(KfTokKind::OpMinusMinus),
            _ => None,
        }
    }

    pub fn is_symbol(&self) -> bool {
        matches!(self,
            KfTokKind::SymCurlyOpen | 
            KfTokKind::SymCurlyClose | 
            KfTokKind::SymParenthOpen | 
            KfTokKind::SymParenthClose | 
            KfTokKind::SymBracketOpen | 
            KfTokKind::SymBracketClose | 
            KfTokKind::SymAmpersand | 
            KfTokKind::SymScopeResolution | 
            KfTokKind::SymAt | 
            KfTokKind::SymSemi | 
            KfTokKind::SymColon | 
            KfTokKind::SymArrow | 
            KfTokKind::SymDot | 
            KfTokKind::SymComma | 
            KfTokKind::SymEllipsis | 
            KfTokKind::SymHashBracket | 
            KfTokKind::SymUnderscore
        )
    }

    pub fn is_keyword(&self) -> bool {
        matches!(self,
            KfTokKind::KwIf | 
            KfTokKind::KwElse | 
            KfTokKind::KwFor | 
            KfTokKind::KwWhile | 
            KfTokKind::KwLoop | 
            KfTokKind::KwFn | 
            KfTokKind::KwPub | 
            KfTokKind::KwLet | 
            KfTokKind::KwMut | 
            KfTokKind::KwIn | 
            KfTokKind::KwBreak | 
            KfTokKind::KwContinue | 
            KfTokKind::KwStruct | 
            KfTokKind::KwEnum | 
            KfTokKind::KwImpl | 
            KfTokKind::KwSelf | 
            KfTokKind::KwSelfT
        )
    }

    pub fn is_operator(&self) -> bool {
        matches!(self,
            KfTokKind::OpEq | 
            KfTokKind::OpNe | 
            KfTokKind::OpGt | 
            KfTokKind::OpGe | 
            KfTokKind::OpLt | 
            KfTokKind::OpLe | 
            KfTokKind::OpPlus | 
            KfTokKind::OpMinus | 
            KfTokKind::OpSlash | 
            KfTokKind::OpStar | 
            KfTokKind::OpBang | 
            KfTokKind::OpAssign | 
            KfTokKind::OpAnd | 
            KfTokKind::OpOr | 
            KfTokKind::OpPlusPlus | 
            KfTokKind::OpMinusMinus
        )
    }

    pub fn is_special_literal(&self) -> bool {
        matches!(self,
            KfTokKind::SlTrue | 
            KfTokKind::SlFalse
        )
    }

}

pub const SPEC_SYMBOLS: &[&str] = &[
   "{",    "}", 
   "(",    ")",    "[",    "]",    "&",    "::",    "@",    ";",    ":",    "->", 
   ".",    ",",    "...",    "#[",    "_",    "==",    "!=",    ">",    ">=",    "<", 
   "<=",    "+",    "-",    "/",    "*",    "!",    "=",    "&&",    "||",    "++", 
   "--", 
];
